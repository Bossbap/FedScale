# Configuration file of FAR training experiment

# ========== Cluster configuration ========== 
# ip address of the parameter server (need 1 GPU process)
ps_ip: 129.104.252.45

# ip address of each worker:# of available gpus process on each gpu in this node
# Note that if we collocate ps and worker on same GPU, then we need to decrease this number of available processes on that GPU by 1
# E.g., master node has 4 available processes, then 1 for the ps, and worker should be set to: worker:3
worker_ips: 
    - 129.104.252.45:[3]
    - 129.104.254.52:[4]
    - 129.104.253.45:[4]
    - 129.104.252.54:[4]
    - 129.104.252.49:[4]
    - 129.104.252.50:[4]
    - 129.104.253.44:[4]


exp_path: /users/eleves-a/2024/baptiste.geisenberger/FedScale/fedscale/cloud

# Entry function of executor and aggregator under $exp_path
executor_entry: execution/executor.py

aggregator_entry: aggregation/aggregator.py

auth:
    ssh_user: "baptiste.geisenberger"
    ssh_private_key: "/users/eleves-a/2024/baptiste.geisenberger/.ssh/id_rsa"

# cmd to run before we can indeed run FAR (in order)
setup_commands:
    - source /Data/baptiste.geisenberger/miniconda3/bin/activate fedscale
#    - export NCCL_SOCKET_IFNAME='enp0s31f6'         # Run "ifconfig" to ensure the right NIC for nccl if you have multiple NICs

# ========== Additional job configuration ========== 
# Default parameters are specified in config_parser.py, wherein more description of the parameter can be found

job_conf:
    - wandb_token: c5a1a0bea7a1022889068d96b579c791dc52420e
    - job_name: google_speech                   # Generate logs under this folder: log_path/job_name/time_stamp
    - num_classes: 35
    - task: speech
    - log_path: /users/eleves-a/2024/baptiste.geisenberger/FedScale/benchmark # Path of log files
    - data_set: google_speech                     # Dataset: openImg, google_speech, stackoverflow
    - data_dir: /Data/baptiste.geisenberger/Data/google_speech    # Path of the dataset
    - data_map_file: /Data/baptiste.geisenberger/Data/google_speech/client_data_mapping/train.csv              # Allocation of data to each client, turn to iid setting if not provided
    - clients_file: /users/eleves-a/2024/baptiste.geisenberger/FedScale/benchmark/dataset/data/clients.pkl
    - use_cuda: True
    - num_loaders: 2
    - clock_factor: 30
    - checkpoint_interval: 10
    - resume_from: /users/eleves-a/2024/baptiste.geisenberger/FedScale/benchmark/logs/google_speech/0725_162823/aggregator/checkpoint_round270.pkl

    - model: resnet34                            # Models: e.g., shufflenet_v2_x2_0, mobilenet_v2, resnet34, albert-base-v2
    - gradient_policy: fed-prox                 # {"fed-yogi", "fed-prox", "fed-avg"}, "fed-avg" by default

    - num_participants: 100                      # Number of participants per round, we use K=100 in our paper, large K will be much slower
    - eval_interval: 5                     # How many rounds to run a testing on the testing set
    - rounds: 500                          # Number of rounds to run this training. We use 1000 in our paper, while it may converge w/ ~400 rounds
    - batch_size: 16
    - filter_less: 17
    - learning_rate: 0.02
    - decay_factor: 0.9
    - decay_round: 10
    - weight_decay: 5e-4
    - test_bsz: 20
    
    - sample_mode: bliss
    - number_clients_to_refresh_utility: 500
    - number_clients_to_predict_utility: 500
    - amount_clients_predict_train_set: 1000
    - amount_clients_refresh_train_set: 1500
    - ema_alpha: 0.9
    - overcomitmment: 1.1

    - adaptive_training: True
    - t_budget: 350
    - pacer_step: 10
    - pacer_delta: 50

    - g_model: xgboost
    - xgboost_g_n_estimators: 200
    - xgboost_g_learning_rate: 0.02
    - xgboost_g_max_depth: 6
    - xgboost_g_subsample: 0.7
    - xgboost_g_colsample_bytree: 0.7

    - h_model: xgboost
    - xgboost_h_n_estimators: 200
    - xgboost_h_learning_rate: 0.05
    - xgboost_h_max_depth: 3
    - xgboost_h_subsample: 0.7
    - xgboost_h_colsample_bytree: 1.0